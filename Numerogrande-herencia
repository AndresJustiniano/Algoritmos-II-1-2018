===============================numeroGrande.cpp=======================================
#include "stdafx.h"
#include "numeroGrande.h"  // se coloca aca la cabezera de la clase principal que es numero grande y no es necesario colocar la de herencia

void main()
{
	NUMEROGRANDE N1, N2, N3;
	N1.leer();
	N2.leer();
	N3.sumar(N1,N2);
	N3.imprimir();
}
=======================clase  numeroGrande.h ==========================================
#include "VECTOR.h"  // aca se coloca como cabezera la clase que hereda a esta que es vector.h 

class NUMEROGRANDE:public vector
{
public:
	void sumar(NUMEROGRANDE N1, NUMEROGRANDE N2);


}; //end class


void NUMEROGRANDE :: sumar(NUMEROGRANDE N1, NUMEROGRANDE N2){
	int i = N1.getDim()-1;
	int j = N2.getDim()-1;
	int acarreo = 0;
	while(i >= 0 && j >= 0)
	{
		int s = N1.getElem(i) + N2.getElem(j) + acarreo;
		int digito = s % 10;
		acarreo = s / 10;
		insertarPri(digito);
		i = i - 1;
		j = j - 1;
	}
    while(i > j && i >=0){
		int s = N1.getElem(i) + acarreo;
		int digito = s % 10;
		insertarPri(digito);
		i = i - 1;
	}
	while(j > i && j >= 0){
		int s = N2.getElem(j) + acarreo;
		int digito = s % 10;
		acarreo = s / 10;
		insertarPri(digito);
		j = j - 1;
    }	
	if(acarreo != 0){
		insertarPri(acarreo);
	}
}
=========================================clase VECTOR.h======================================================
#include "stdafx.h"
#include "iostream"
#include "conio.h"

using namespace std;

typedef int tipoElem;
const int MAX=50;

class vector
{
private:
   tipoElem v[MAX];
   int n;

public:
   vector()
   {
	  n=0;	  
   }

void setElem(tipoElem x,int p){
   v[p]=x;
}

int getElem(int p){
  return v[p];
}

void setDim(int d){
  n=d;
}

int getDim(){
  return n;
}

void leer();

void imprimir();

bool vacio()
{ return n==0; }

bool lleno()
{ return n==MAX; }

void eliminarUlt(int p)
{ eliminar(n-1); }

void insertar(tipoElem x,int p);

void insertarUlt(tipoElem x)
{ insertar(x,n); }

void insertarPri(tipoElem x)
{ insertar(x,0); }

void eliminar(int p);

void eliminarUlt()
{ eliminar(n-1); }

void eliminarPri()
{ eliminar(0); }


}; //end class

void vector::leer()
{
	int m;
	cout<<"Cantidad elementos:";
	cin>>m; int x;
	setDim(m);
	for(int i=0;i<m;i++){
	  cout<<"Elem:"; cin>>x;
	  setElem(x,i);
	}
}

void vector::imprimir()
{
	for(int i=0;i<getDim();i++) {
	  cout<<getElem(i)<<"  ";
	}
	cout<<endl;
	getch();
}

void vector::insertar(tipoElem x, int p){
  if(p<0 && p >= n) {	  
	  cout<<"Posicion no valida...!!!";
	  return ;
  } 
  if(lleno()){
     cout<<"Vector lleno...!!!";
	 return ;
  }	 
	int k=n-1;
	while(k>=p){
	   v[k+1]=v[k];
	   k--;
	}
	 v[p]=x;
	 n=n + 1;	
}

void vector::eliminar(int p){
  if(p<0 || p >= n) {	  
	  cout<<"Posicion no valida...!!!";
	  return ;
  } 
  if(vacio()){
     cout<<"Vector vacio...!!!";
	 return ;
  }	 
	int k=p + 1;
	while(k < n){
	   v[k-1]=v[k];
	   k++;
	}	 
	 n=n - 1;	
}















